@using BoneLog.Blazor.Components
@using BoneLog.Blazor.Dtos
@using System.Text.Json
@inject HttpClient Http

<footer class="bg-inherit border-t border-neutral-200 dark:border-white/10 px-6 py-6">
    @if(socialLinks != null && socialLinks.Count > 0)
    {
        <div class="flex justify-center space-x-4 mb-4">
            @foreach(var link in socialLinks)
            {
                <a href="@link.Url" target="_blank" rel="noopener noreferrer"
                class="w-10 h-10 flex items-center justify-center text-2xl rounded-full border border-neutral-300 dark:border-neutral-600 hover:bg-teal-500 hover:text-white transition">
                    <i class="@link.IconClass"></i>
                </a>
            }
        </div>
    }

    <div class="border-t border-neutral-200 dark:border-white/10 my-4 w-1/2 mx-auto"></div>

    <div class="text-center">
        <code class="text-xs font-mono bg-neutral-100 dark:bg-neutral-800 px-3 py-1 rounded text-neutral-700 dark:text-neutral-300">
           &lt; <a href="https://github.com/taqiam/BoneLog" target="_blank" rel="noopener noreferrer" class="hover:underline">Powered By BoneLog </a><a href="https://github.com/taqiam" target="_blank" rel="noopener noreferrer" class="hover:underline">Made By Tea And 🤍</a> /&gt;
        </code>
    </div>
</footer>




@code {
    private List<SocialLinkDto>? socialLinks = new();

    protected override async Task OnInitializedAsync()
    {
        var json = await Http.GetStringAsync($"data/socialLinks.json");
        if(json is not null)
        {
            socialLinks = JsonSerializer.Deserialize<List<SocialLinkDto>>(json,new JsonSerializerOptions()
            {
                PropertyNameCaseInsensitive = true,
            });
        }
    }
}
